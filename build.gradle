buildscript {
    repositories {
        jcenter()
        mavenCentral()
        maven { url "http://dl.bintray.com/jetbrains/spek" }
        maven { url "https://plugins.gradle.org/m2/" }
    }
}

plugins {
    id 'java'
    id 'groovy'
    id 'org.jetbrains.kotlin.jvm' version '1.2.41' apply false

    id 'io.spring.dependency-management' version '1.0.5.RELEASE'  apply false
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'groovy'
    apply plugin: 'org.jetbrains.kotlin.jvm'
    
    apply plugin: 'io.spring.dependency-management'

    group = 'ru.snm.tutorial.java_8_lambdas'
    version = '0.2.0-SNAPSHOT'

    repositories {
        jcenter()
        mavenCentral()
        maven {url "http://dl.bintray.com/jetbrains/spek"}
        maven {url "https://plugins.gradle.org/m2/"}
    }

    dependencyManagement {
        dependencies {
            dependencySet( group: 'org.junit.jupiter', version: '5.2.0' ) {
                entry 'junit-jupiter-api'
                entry 'junit-jupiter-engine'
                entry 'junit-jupiter-params'
            }

            dependencySet( group: 'org.junit.vintage', version: '5.2.0' ) {
                entry 'junit-jupiter-vintage'
                entry 'junit-vintage-engine'
            }

            dependencySet( group: 'org.junit.platform', version: '1.2.0' ) {
                entry 'junit-platform-runner'
            }

            dependencySet( group: 'org.jetbrains.kotlin', version: '1.2.41' ) {
                entry 'kotlin-stdlib'
                entry 'kotlin-reflect'
            }
            dependencySet( group: 'org.jetbrains.spek', version: '1.1.5' ) {
                entry( 'spek-api' ) {
                    exclude group: 'org.jetbrains.kotlin'
                }
                entry( 'spek-junit-platform-engine' ) {
                    exclude group: 'org.junit.platform'
                    exclude group: 'org.jetbrains.kotlin'
                }
            }

            dependencySet( group: 'org.spockframework', version: '1.1-groovy-2.4' ) {
                entry 'spock-core'
            }

        }
    }

    dependencies {

        compileClasspath 'org.jetbrains.kotlin:kotlin-stdlib'

        testImplementation(
                'org.jetbrains.spek:spek-api',
                'org.jetbrains.kotlin:kotlin-reflect',

                'org.junit.jupiter:junit-jupiter-api',
                'org.junit.jupiter:junit-jupiter-params',
                'org.junit.platform:junit-platform-runner',

                'org.spockframework:spock-core',
        )

        testRuntimeOnly(
                'org.jetbrains.spek:spek-junit-platform-engine',

                'org.junit.jupiter:junit-jupiter-engine',
                
                'org.junit.vintage:junit-vintage-engine',
               
        )
    }

    test {
        useJUnitPlatform()


        // always run tests
        outputs.upToDateWhen { false }
        failFast = false

        testLogging.showStandardStreams = true
        testLogging {
            events "passed", "skipped", "failed"
        }

        reports {
            html.enabled = true
        }
    }
}

project( ':chapter-03' ) {
    dependencies {
        testImplementation(
                /* not very clean solution, to be honest,
                 * but it does not create another artifact */
                project( ':chapter-01' ).sourceSets.test.output
        )
    }

}
